// Code generated by "stringer -type=InstructionKind"; DO NOT EDIT.

package ir

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Undefined-0]
	_ = x[Add-1]
	_ = x[Sub-2]
	_ = x[Mul-3]
	_ = x[Quo-4]
	_ = x[Mod-5]
	_ = x[Equals-6]
	_ = x[NotEquals-7]
	_ = x[Move-8]
	_ = x[IfTrueGoto-9]
	_ = x[And-10]
	_ = x[Or-11]
	_ = x[Not-12]
	_ = x[Bool-13]
	_ = x[I8-14]
	_ = x[I16-15]
	_ = x[I32-16]
	_ = x[I64-17]
	_ = x[F32-18]
	_ = x[F64-19]
	_ = x[Phi-20]
	_ = x[Ret-21]
	_ = x[Function-22]
	_ = x[Call-23]
	_ = x[Push-24]
	_ = x[Pop-25]
}

const _InstructionKind_name = "UndefinedAddSubMulQuoModEqualsNotEqualsMoveIfTrueGotoAndOrNotBoolI8I16I32I64F32F64PhiRetFunctionCallPushPop"

var _InstructionKind_index = [...]uint8{0, 9, 12, 15, 18, 21, 24, 30, 39, 43, 53, 56, 58, 61, 65, 67, 70, 73, 76, 79, 82, 85, 88, 96, 100, 104, 107}

func (i InstructionKind) String() string {
	if i < 0 || i >= InstructionKind(len(_InstructionKind_index)-1) {
		return "InstructionKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _InstructionKind_name[_InstructionKind_index[i]:_InstructionKind_index[i+1]]
}
